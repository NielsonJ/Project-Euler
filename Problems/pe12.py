import time
import math

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# 36: 1,2,3,4,6,9,12,18,36
# 45: 1,3,5,9,15,45
# We can see that 28 is the first triangle number to have over five divisors.
# Nielson noted you don't have to evaluate higher then sqrt(number) cause every find will mirrored to that point (so add 2)
# example: 28/2=14, do not check higher.

# What is the value of the first triangle number to have over five hundred divisors?


def main():
    print('Calculating problem 12:')
    start = time.clock()

    index = 0
    while True:
        index += 1
        value = getValueOfTriNum(index)
        factors = getAmountFactorsOf(value)
        if factors > 500:
            answer = value
            break

    end = time.clock()
    print('answer: ' + str(answer))
    print('time: ' + str(end - start))


def getAmountFactorsOf(value):
    # Following algorithm checks for factors up to sqrt(value),
    # 1 and value are divisions so start at 2
    # add 1 for sqrt(value) if its a natarual division
    # add 2 for every value between 1 and sqrt(value) that is an division
    if value <= 1:
        return 1
    else:
        factors = 2
        # division returns float, convert int
        checkUpTo = int(math.sqrt(value))
        # if value % checkUpTo == 0:
        if checkUpTo**2 == value:
            factors += 1
            checkUpTo -= 1
        for x in range(2, checkUpTo + 1):
            if value % x == 0:
                factors += 2
        return factors


def getValueOfTriNum(n):
    # Get value of n'th triangle number
    trianglenumber = 0
    for x in range(0, n + 1):
        trianglenumber += x
    return trianglenumber


if __name__ == '__main__':
    main()
